{
	/**
	 * Subscription Service
	 *
	 * This autonomous agent allows service providers to set up recurring subscription contracts for their customers
	 * and charge an agreed amount periodically. The customers must consent to the contract conditions before the
	 * service provider can start collecting money. The customers can fund their account with any amount of money which
	 * they can withdraw at any time. Customers and service providers are also allowed to cancel the recurring contract
	 * at any time. Service providers should listen to events of this AA corresponding their customers to get notified
	 * if a cancellation happens.
	 *
	 * Usage:
	 *  - contract setup: service provider sends contract details
	 *  - contract authorization: customer authorizes the contract set up by the service provider
	 *  - customer account funding: the customer funds their account by sending bytes to AA
	 *  - subscription fee collection: the service provider collects the recurring charges periodically
	 *  - contract termination: the service provider or the customer cancels the contract
	 *  - funds withdrawal: the customer withdraws the funds if they aren't planning to use the provided service anymore
	 */
	bounce_fees: { base: 10000 },
	init: `{
		$BOUNCE_FEE = 10000;
		$TYPICAL_FEE = 1000;
		$REIMBURSEMENT = $BOUNCE_FEE - $TYPICAL_FEE;
	}`,
	messages: {
		cases: [
			{
				/**
				 * Triggered by the service provider to set up the recurring contract.
				 *
				 * @param payer - the customer's Obyte address
				 * @param period - the length of the recurring period in seconds, charges can be collected once in a period
				 * @param amount - the amount in bytes to be charged periodically
				 *
				 * @response reference - the recurring contract reference to be used in subsequent requests to collect
				 *           subscription fees. The service provider is supposed to save this reference.
				 */
				if: `{ trigger.data.payer }`,
				init: `{
					$payee = trigger.address;
					$payer = trigger.data.payer otherwise bounce("payer field is missing");
					$period = trigger.data.period otherwise bounce("period field is missing");
					$amount = trigger.data.amount otherwise bounce("amount field is missing");
					$reference = sha256($payer || $payee || $period || $amount );
				}`,
				messages: [
					{
						app: 'payment',
						payload: {
							asset: 'base',
							outputs: [{address: "{trigger.address}", amount: "{$REIMBURSEMENT}"}]
						}
					},
					{
						app: 'state',
						state: `{
							var[$reference] = 'requested';
							var[$reference||'.payee'] = $payee;
							var[$reference||'.payer'] = $payer;
							var[$reference||'.period'] = $period;
							var[$reference||'.amount'] = $amount;
							response['reference'] = $reference;
							response['status'] = var[$reference];
							response['message'] = 'Recurring contract requested';
						}`
					}
				]
			},
			{
				/**
				 * Triggered by customer to accept the recurring contract conditions. This step is to ensure the customer
				 * agrees to the same terms the service provider set up.
				 *
				 * The parameters required by this branch correspond to the ones the service provider set up. The service
				 * provider could make it easier this step for the customer by sending an Obyte link with pre-filled data
				 * elements and a payment addressed to this AA.
				 *
				 * @param payee - the Obyte address of the service provider that will collect the subscription fees
				 * @param period - the length of the recurring period in seconds
				 * @param amount - the amount in bytes to be charged periodically
				 *
				 * @response reference - the recurring contract reference to be used to cancel the contract. The customer
				 *           is supposed to save this reference.
				 */
				if: `{ trigger.data.payee}`,
				init: `{
					$payer = trigger.address;
					$payee = trigger.data.payee otherwise bounce("payee field is missing");
					$period = trigger.data.period otherwise bounce("period field is missing");
					$amount = trigger.data.amount otherwise bounce("amount field is missing");
					$reference = sha256($payer || $payee || $period || $amount );
					$minimum_payment = $TYPICAL_FEE + $amount;

					if (!var[$reference]) bounce("no such contract, verify contract conditions");
					if (var[$reference] == 'authorized') bounce('contract has already been authorized');
					if (trigger.output[[asset=base]] < $minimum_payment) bounce("minium payment is " || $minimum_payment);
				}`,
				messages: [
					{
						if: `{ $BOUNCE_FEE > $minimum_payment }`,
						app: 'payment',
						payload: {
							asset: 'base',
							outputs: [{address: "{trigger.address}", amount: "{$BOUNCE_FEE - $minimum_payment}"}]
						}
					},
					{
						app: 'state',
						state: `{
							var[$payer] = $amount;
							var[$reference] = 'authorized';
							var[$reference || '.next_payment'] = timestamp;
							response['reference'] = $reference;
							response['status'] = var[$reference];
							response['message'] = 'Recurring contract authorized';
						}`
					}
				]
			},
			{
				/**
				 * Triggered by the customer or the service provider to cancel the contract.
				 *
				 * @param action - the literal 'cancel'
				 * @param reference - the reference of the recurring contract to be cancelled
				 *
				 * @response reference
				 * @response status - the new cancelled status
				 */
				if: `{ trigger.data.action AND trigger.data.action == 'cancel' }`,
				init: `{
					$reference = trigger.data.reference otherwise bounce("reference field is missing");
					$payee = var[$reference || '.payee'];
					$payer = var[$reference || '.payer'];

					if (!var[$reference]) bounce("No such contract");
					if (trigger.address != $payer AND trigger.address != $payee) bounce("Unauthorized");
				}`,
				messages: [
					{
						app: 'payment',
						payload: {
							asset: 'base',
							outputs: [{ address: "{trigger.address}", amount: "{$REIMBURSEMENT}"}]
						}
					},
					{
						app: 'state',
						state: `{
							var[$reference] = 'cancelled';
							response['reference'] = $reference;
							response['status'] = var[$reference];
							response['message'] = 'Recurring contract cancelled';
						}`
					}
				]
			},
			{
				/**
				 * Withdraw a specified amount of money or the whole balance to the 'trigger.address'.
				 *
				 * @param action - the literal 'withdraw'
				 * @param amount - optional, if provided it's the amount in bytes to be withdrawn, otherwise the full 
				 *                 balance is withdrawn. 
				 */
				if: `{ trigger.data.action AND trigger.data.action == 'withdraw' }`,
				init: `{
					$account = trigger.address;
					$balance = var[$account] otherwise bounce("No such account");
					$amount = trigger.data.amount otherwise $balance;

					if ($amount > $balance) bounce("Invalid withdrawal amount. Maximum balance is " || $balance);
					if ($amount <= 0) bounce("Invalid withdrawal amount. Enter a number greater than zero.");
				}`,
				messages: [
					{
						app: 'payment',
						payload: {
							outputs: [
								{address: "{$account}", amount: "{$amount}"},
								{address: "{$account}", amount: "{$REIMBURSEMENT}"}
							]
						}
					},
					{
						app: 'state',
						state: `{
							var[$account] -= $amount;
						}`
					}
				]
			},
			{
				/**
				 * Triggered by the service provider to collect subscription fees. Since the contract details are already
				 * stored in the state variables of the AA, providing just the reference is sufficient.
				 *
				 * @param reference - the reference of the recurring contract to collect fees for
				 */
				if: `{ trigger.data.reference }`,
				init: `{						
					$reference = trigger.data.reference;

					$status = var[$reference] otherwise bounce("No such contract");
					if ($status != 'authorized') bounce("Contract not authorized yet");

					$payee = var[$reference || '.payee'];
					$payer = var[$reference || '.payer'];
					$period = var[$reference || '.period'];
					$amount = var[$reference || '.amount'];
					$next_payment = var[$reference || '.next_payment'];
					$balance = var[$payer] otherwise bounce("Insufficient funds");

					if ($balance < $amount) bounce("Insufficient funds");
					if ($next_payment > timestamp) bounce("Current period has already been paid");
					if (trigger.address != $payee) bounce("Unauthorized");
				}`,
				messages: [
					{
						app: 'payment',
						payload: {
							outputs: [
								{address: "{$payee}", amount: "{$amount}"},
								{address: "{$payee}", amount: "{$REIMBURSEMENT}"}
							]
						}
					},
					{
						app: 'state',
						state: `{
							var[$payer] -= $amount;
							var[$reference || '.next_payment'] = $next_payment + $period;
						}`
					}
				]
			},
			{
				/**
				 * Triggered by customer to deposit money.
				 * 
				 * This branch requires no parameters, simply some money exceeding the bounce fees.
				 */
				if: `{
					$account = trigger.address;
					$deposit = trigger.output[[asset = base]];
					$deposit > $BOUNCE_FEE
				}`,
				messages: [
					{
						app: 'state',
						state: `{
							var[$account] += $deposit;
							response['balance'] = var[$account];
							response['message'] = 'Added ' || $deposit || ' bytes to your balance';
						}`
					}
				]
			},
			{
				if: `{ trigger.data.action }`,
				init: `{
					bounce("Possible values for action: cancel, withdraw");
				}`,
				messages: [
					{
						app: 'state',
						state: `{
							response['usage'] = 'Possible values for action: cancel, withdraw';
						}`
					}
				]
			},
			{
				init: `{
					bounce("Enter data fields: payer, payee, withdraw, reference or action");
				}`,
				messages: [
					{
						app: 'state',
						state: `{
							response['usage'] = 'Enter data fields: payer, payee, withdraw, reference or action';
						}`
					}
				]
			}
		]
	}
}
